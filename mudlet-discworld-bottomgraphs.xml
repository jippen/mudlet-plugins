<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.0">
    <TriggerPackage>
            <TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
            <name>Gauges</name>
            <script></script>
            <triggerType>0</triggerType>
            <conditonLineDelta>0</conditonLineDelta>
            <mStayOpen>0</mStayOpen>
            <mCommand></mCommand>
            <packageName></packageName>
            <mFgColor>#ff0000</mFgColor>
            <mBgColor>#ffff00</mBgColor>
            <mSoundFile></mSoundFile>
            <colorTriggerFgColor>#000000</colorTriggerFgColor>
            <colorTriggerBgColor>#000000</colorTriggerBgColor>
            <regexCodeList/>
            <regexCodePropertyList/>
            <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                <name>Score Brief</name>
                <script>minHP = matches[2]
maxHP = matches[3]
minGP = matches[4]
maxGP = matches[5]

hpStr = &quot;  HP: &quot; .. minHP .. &quot; / &quot; .. maxHP
gpStr = &quot;  GP: &quot; .. minGP .. &quot; / &quot; .. maxGP
xpStr = &quot;  XP: &quot; .. matches[6]

setGauge(&quot;healthBar&quot;, tonumber(minHP), tonumber(maxHP), hpStr)
setGauge(&quot;gpBar&quot;,     tonumber(minGP), tonumber(maxGP), gpStr)
setGauge(&quot;xpBar&quot;,     100,             100,             xpStr)</script>
                <triggerType>0</triggerType>
                <conditonLineDelta>0</conditonLineDelta>
                <mStayOpen>0</mStayOpen>
                <mCommand></mCommand>
                <packageName></packageName>
                <mFgColor>#ff0000</mFgColor>
                <mBgColor>#ffff00</mBgColor>
                <mSoundFile></mSoundFile>
                <colorTriggerFgColor>#000000</colorTriggerFgColor>
                <colorTriggerBgColor>#000000</colorTriggerBgColor>
                <regexCodeList>
                    <string>Hp:[ ]+(\d+)\((\d+)\)[ ]+Gp:[ ]+(\d+)\((\d+)\)[ ]+Xp:[ ]+(\d+)</string>
                </regexCodeList>
                <regexCodePropertyList>
                    <integer>1</integer>
                </regexCodePropertyList>
            </Trigger>
            <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                <name>Monitor</name>
                <script>minHP = matches[2]
maxHP = matches[3]
minGP = matches[4]
maxGP = matches[5]

hpStr = &quot;  HP: &quot; .. minHP .. &quot; / &quot; .. maxHP
gpStr = &quot;  GP: &quot; .. minGP .. &quot; / &quot; .. maxGP
xpStr = &quot;  XP: &quot; .. matches[6]

setGauge(&quot;healthBar&quot;, tonumber(minHP), tonumber(maxHP), hpStr)
setGauge(&quot;gpBar&quot;,     tonumber(minGP), tonumber(maxGP), gpStr)
setGauge(&quot;xpBar&quot;,     100,             100,             xpStr)</script>
                <triggerType>0</triggerType>
                <conditonLineDelta>0</conditonLineDelta>
                <mStayOpen>0</mStayOpen>
                <mCommand></mCommand>
                <packageName></packageName>
                <mFgColor>#ff0000</mFgColor>
                <mBgColor>#ffff00</mBgColor>
                <mSoundFile></mSoundFile>
                <colorTriggerFgColor>#000000</colorTriggerFgColor>
                <colorTriggerBgColor>#000000</colorTriggerBgColor>
                <regexCodeList>
                    <string>Hp: (\d+) \((\d+)\) Gp: (\d+) \((\d+)\) Xp: (\d+)</string>
                </regexCodeList>
                <regexCodePropertyList>
                    <integer>1</integer>
                </regexCodePropertyList>
            </Trigger>
        </TriggerGroup>
        <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
            <name>Login triggers</name>
            <script>sendGMCP(&quot;core.supports.set \[\&quot;Char.Vitals\&quot;\]&quot;)

--function createGauge(gaugeName, width, height, Xpos, Ypos, gaugeText, color1, color2, color3)
mainWidth, mainHeight = getMainWindowSize()
xpbarW = 150
gaugeW = ( (mainWidth - xpbarW) / 2) - 2
gaugeH = 20

createGauge(&quot;healthBar&quot;, gaugeW - 2, gaugeH, 0,                 mainHeight - gaugeH, &quot;  HP: ??? / ???&quot;, &quot;red&quot;  )
createGauge(&quot;gpBar&quot;,     gaugeW,     gaugeH, gaugeW,            mainHeight - gaugeH, &quot;  GP: ??? / ???&quot;, &quot;cyan&quot; )
createGauge(&quot;xpBar&quot;,     xpbarW,     gaugeH, mainWidth - xpbarW,mainHeight - gaugeH, &quot;  XP: ?&quot;,         &quot;green&quot;)</script>
            <triggerType>0</triggerType>
            <conditonLineDelta>0</conditonLineDelta>
            <mStayOpen>0</mStayOpen>
            <mCommand></mCommand>
            <packageName></packageName>
            <mFgColor>#ff0000</mFgColor>
            <mBgColor>#ffff00</mBgColor>
            <mSoundFile></mSoundFile>
            <colorTriggerFgColor>#000000</colorTriggerFgColor>
            <colorTriggerBgColor>#000000</colorTriggerBgColor>
            <regexCodeList>
                <string>Welcome to Discworld:</string>
            </regexCodeList>
            <regexCodePropertyList>
                <integer>2</integer>
            </regexCodePropertyList>
        </Trigger>
    </TriggerPackage>
    <ScriptPackage>
        <ScriptGroup isActive="yes" isFolder="yes">
            <name>Gauges</name>
            <packageName></packageName>
            <script></script>
            <eventHandlerList/>
            <Script isActive="no" isFolder="no">
                <name>createGauge</name>
                <packageName></packageName>
                <script>-- Make your very own customized gauge with this function.
--
-- Example: 
--
-- createGauge(&quot;healthBar&quot;, 300, 20, 30, 300, nil, 0, 255, 0) 
-- or 
-- createGauge(&quot;healthBar&quot;, 300, 20, 30, 300, nil, &quot;green&quot;)
--
-- This would make a gauge at that's 300px width, 20px in height, located at Xpos and Ypos and is green.
-- The second example is using the same names you'd use for something like fg() or bg().
--
-- If you wish to have some text on your label, you'll change the nil part and make it look like this:
-- createGauge(&quot;healthBar&quot;, 300, 20, 30, 300, &quot;Now with some text&quot;, 0, 255, 0) 
-- or 
-- createGauge(&quot;healthBar&quot;, 300, 20, 30, 300, &quot;Now with some text&quot;, &quot;green&quot;)

gaugesTable = {} -- first we need to make this table which will be used later to store important data in...

function createGauge(gaugeName, width, height, Xpos, Ypos, gaugeText, color1, color2, color3)
   

   -- make a nice background for our gauge
   createLabel(gaugeName .. &quot;_back&quot;,0,0,0,0,1)
   if color2 == nil then
      local red, green, blue = getRGB(color1)
      setBackgroundColor(gaugeName .. &quot;_back&quot;, red , green, blue, 100)      
   else
      setBackgroundColor(gaugeName .. &quot;_back&quot;, color1 ,color2, color3, 100)
   end
   moveWindow(gaugeName .. &quot;_back&quot;, Xpos, Ypos)
   resizeWindow(gaugeName .. &quot;_back&quot;, width, height)
   showWindow(gaugeName .. &quot;_back&quot;)

   -- make a nicer front for our gauge
   createLabel(gaugeName,0,0,0,0,1)
   if color2 == nil then
      local red, green, blue = getRGB(color1)
      setBackgroundColor(gaugeName, red , green, blue, 255)      
   else
      setBackgroundColor(gaugeName, color1 ,color2, color3, 255)
   end
   moveWindow(gaugeName, Xpos, Ypos)
   resizeWindow(gaugeName, width, height)
   showWindow(gaugeName)

   -- put some text on our label
   if gaugeText ~= nil then
      echo(gaugeName .. &quot;_back&quot;, gaugeText)
      echo(gaugeName, gaugeText)
   else
      -- just so that it'll get rid of the text if there already was a label like this
      echo(gaugeName .. &quot;_back&quot;, &quot;&quot;)
      echo(gaugeName, &quot;&quot;)
   end

   -- store important data in a table
   table.insert(gaugesTable, {name = gaugeName, width = width, height = height, color1 = color1, color2 = color2, color3 = color3})
   
end</script>
                <eventHandlerList/>
            </Script>
            <Script isActive="yes" isFolder="no">
                <name>setGaugeStyleSheet</name>
                <packageName></packageName>
                <script>function setGaugeStyleSheet(gaugeName, css, cssback)
if not setLabelStyleSheet then return end-- mudlet 1.0.5 and lower compatibility

   for _,g in pairs(gaugesTable) do
      if g.name == gaugeName then
         setLabelStyleSheet(gaugeName, css)
         setLabelStyleSheet(gaugeName .. &quot;_back&quot;, cssback or css)
      end
   end
end</script>
                <eventHandlerList/>
            </Script>
            <Script isActive="yes" isFolder="no">
                <name>getRGB</name>
                <packageName></packageName>
                <script>-- Return the numbers of a RGB colour by using the names used in our color_table. 
--
-- Example: 
--
-- local red, green, blue = getRGB(&quot;green&quot;)
-- echo(red .. &quot;.&quot; .. green .. &quot;.&quot; .. blue ) 
--
-- This would then display 0.255.0 on your screen.

function getRGB(colorName)

   local red = color_table[colorName][1]
   local green = color_table[colorName][2]
   local blue = color_table[colorName][3]

   return red, green, blue
   
end</script>
                <eventHandlerList/>
            </Script>
            <Script isActive="yes" isFolder="no">
                <name>setGauge</name>
                <packageName></packageName>
                <script>-- Use this function when you want to change the gauges look according to your values.
--
-- Example: 
--
-- setGauge(&quot;healthBar&quot;, 200, 400)
--
-- In that example, we'd change the looks of the gauge named healthBar and make it fill
-- to half of its capacity. The height is always remembered.
--
-- If you wish to change the text on your gauge, you'd do the following:
--
-- setGauge(&quot;healthBar&quot;, 200, 400, &quot;some text&quot;)
--
-- Typical usage would be in a prompt with your current health or whatever value, and throw
-- in some variables instead of the numbers.

function setGauge(gaugeName, currentValue, maxValue, gaugeText)   


   -- search through our gaugesTable for our name input and change according to the values
   for _,v in pairs(gaugesTable) do
      if v.name == gaugeName then
         resizeWindow(gaugeName, v.width/100*((100/maxValue)*currentValue), v.height)
      end
   end

   -- if we wanted to change the text, we do it
   if gaugeText ~= nil then
      echo(gaugeName .. &quot;_back&quot;, gaugeText)
      echo(gaugeName, gaugeText)
   end
   
end
</script>
                <eventHandlerList/>
            </Script>
            <Script isActive="yes" isFolder="no">
                <name>resizeGauge</name>
                <packageName></packageName>
                <script>-- Resizes a custom gauge built by createGauge(...)
-- example: resizeGauge(&quot;healthbar&quot;, 150, 15)
-- This would make the healthbar 150 pix wide by 15 pix tall
function resizeGauge(gaugeName, width, height)
   for _,g in pairs(gaugesTable) do
      if g.name == gaugeName then
         resizeWindow(gaugeName, width, height)
         resizeWindow(gaugeName .. &quot;_back&quot;, width, height)
      end
   end
end</script>
                <eventHandlerList/>
            </Script>
        </ScriptGroup>
    </ScriptPackage>
</MudletPackage>
